<?php

namespace App\Services;

use App\Helpers\Helper;
use App\Helpers\TableHelper;
use App\Models\Product;
use App\Models\ProductGroup;
use App\Models\ProductGroupPriority;
use App\Models\ProductLog;
use \Illuminate\Support\Carbon;
use App\Repositories\ProductGroupPriority\ProductGroupPriorityRepositoryInterface;
use App\Repositories\ProductGroup\ProductGroupRepositoryInterface;
use Illuminate\Support\Facades\Auth;
use PHPUnit\TextUI\Help;

class ProductGroupPriorityService extends BaseService
{
    protected ProductGroupPriorityRepositoryInterface $repository;
    protected ProductGroupRepositoryInterface $productGroupRepository;

    public function __construct(
        ProductGroupPriorityRepositoryInterface $repository,
        ProductGroupRepositoryInterface         $productGroupRepository,
    )
    {
        parent::__construct();
        $this->repository             = $repository;
        $this->productGroupRepository = $productGroupRepository;
    }

    public function setModel(): ProductGroupPriority
    {
        return new ProductGroupPriority();
    }

    public function formOptions($model = null): array
    {
        $options = parent::formOptions($model); // TODO: Change the autogenerated stub
        $maxYear = Carbon::now()->addYears(2)->format('Y');

        $productTypes = ProductGroup::PRODUCT_TYPES;

        $productTypes = collect($productTypes)->map(function ($_item) {
            $_item = $_item["text"];
            return $_item;
        });

        $options['product_types'] = ['' => '- Loại sản phẩm -'] + $productTypes->toArray();
        $options['store_type']    = ['' => '- Loại nhà thuốc -'] + ProductGroupPriority::STORE_TYPE_TEXTS;
        $options['region_apply']  = ['' => '- Miền áp dụng -'] + ProductGroupPriority::REGION_APPLY_TEXTS;

        if (request()->route()->getName() == 'admin.product-group-priorities.create') {
            $minYear = Carbon::now()->format('Y');
        } else {
            $years   = $this->repository->getMinMaxYear();
            $minYear = $years['minYear'] ?? Carbon::now()->format('Y');
        }

        if (request()->route()->getName() == 'admin.product-group-priorities.create') {
            $options['product_groups'] = ProductGroup::sortLists(0, 0, null, true);
            $options['products']       = Product::query()->active()->get();
            $options['periods']        = Helper::periodOptionMultipleYears($minYear, $maxYear, true);
        } else {
            $options['product_groups'] = ProductGroup::sortLists(0, 0, null, false);
            $options['products']       = Product::query()->get();
            $options['periods']        = Helper::periodOptionMultipleYears($minYear, $maxYear);
        }
        //dd($options['products']);

        $optionProducts = [0 => '--Chọn sản phẩm--'];
        foreach ($options['products'] as $_product) {
            $_productId                  = $_product["id"];
            $optionProducts[$_productId] = $_product["name"];
        }
        $options['option_products'] = $optionProducts;


        return $options;
    }

    public function getTable($requestParams = []): array
    {
        $minDate = $maxDate = [];
        $curYear = now()->format('Y');

        $requestProductType = $requestParams['product_type'] ?? null;
        $requestPeriods     = $requestParams['period'] ?? [];
        $requestProducId    = (isset($requestParams['product_id'])) ? $requestParams['product_id'] : 0;
        $requestStoreType   = $requestParams['store_type'] ?? null;
        $requestRegionApply = $requestParams['region_apply'] ?? null;

        $groupProductPriorities = $this->repository->getListDataMultiPeriodpublic(
            ['product', 'product.log', 'productGroup', 'productSubGroup'],
            $requestProductType,
            $requestProducId,
            $requestPeriods,
            $requestStoreType,
            $requestRegionApply
        );

        $productTypes = ProductGroup::PRODUCT_TYPES;
        $periodData   = [];
        foreach ($groupProductPriorities as $_productGroupPriority) {
            $_productType     = $_productGroupPriority->product_type;
            $_productTypeName = (isset($productTypes[$_productGroupPriority->product_type])) ? $productTypes[$_productGroupPriority->product_type]['text'] : 'Empty';
            $_periodOfYear    = (isset($productTypes[$_productGroupPriority->product_type])) ? $productTypes[$_productGroupPriority->product_type]['period_of_year'] : 0;

            if ($_periodOfYear == 0) continue;

            $_productGroupPrioritiesId = $_productGroupPriority->id ?? '';
            $_period_from              = isset($_productGroupPriority->period_from) ? Carbon::parse($_productGroupPriority->period_from)->format('Y-m-d') : '';
            $_period_to                = isset($_productGroupPriority->period_to) ? Carbon::parse($_productGroupPriority->period_to)->format('Y-m-d') : '';
            $_groupName                = $_productGroupPriority->productGroup->name ?? '';
            $_subGroup                 = $_productGroupPriority->productSubGroup->name ?? '';
            $_productName              = $_productGroupPriority->product->name ?? '';
            $_priority                 = $_productGroupPriority->priority ?? '';

            $fromPeriodName  = Helper::getPeriodName($_period_from, $_periodOfYear);
            $toPeriodName    = Helper::getPeriodName($_period_to, $_periodOfYear);
            $storeTypeName   = ProductGroupPriority::STORE_TYPE_TEXTS[$_productGroupPriority->store_type] ?? '';
            $regionApplyName = ProductGroupPriority::REGION_APPLY_TEXTS[$_productGroupPriority->region_apply] ?? '';

            $periodName = "<div class='p-1 text-nowrap'>
                <b class='text-primary'>Chu kỳ:</b> $fromPeriodName - $toPeriodName<br>
                <b class='text-primary'>Loại hàng:</b> $_productTypeName<br>
                <b class='text-primary'>Loại nhà thuốc:</b> $storeTypeName<br>
                <b class='text-primary'>Miền áp dụng:</b> $regionApplyName<br>
            </div>";

            $statusLog = null;
            if ($_productGroupPriority->product && $_productGroupPriority->product->log) {
                $statusLog = $_productGroupPriority->product->log->whereBetween('created_at', [$_period_from, $_period_to])
                    ->last()->status ?? ProductLog::STATUS_ACTIVE;
            }

            if ($_productName) {
                $periodData[$periodName][$_groupName][$_subGroup][] =
                    ['name' => $_productName, 'priority' => $_priority, 'productGroupPrioritiesId' => $_productGroupPrioritiesId, 'statusLog' => $statusLog];
            }

        }

        return $periodData;
    }

    public function getTable2($requestParams = [], $showOption = []): TableHelper
    {
        $showOption = array_merge([
            "perPage" => config("table.default_paginate"),
            "orderBy" => [
                [
                    "column" => "product_group_priorities.created_at",
                    "type"   => "DESC"
                ]
            ]
        ], $showOption);

        $productGroupPriorities = $this->repository->getByRequest(
            with: ['productGroup', 'productSubGroup'],
            requestParams: $requestParams,
            showOption: $showOption
        );

        $currentUser                   = Helper::currentUser();
        $canEditProductGroupPriority   = $currentUser->can('sua_nhom_va_san_pham_uu_tien');
        $canDeleteProductGroupPriority = $currentUser->can('xoa_nhom_va_san_pham_uu_tien');
        $cur_page                      = $productGroupPriorities->currentPage();
        $per_page                      = $productGroupPriorities->perPage();

        $productGroupPriorities->map(function ($productGroupPriority, $key) use ($canEditProductGroupPriority, $canDeleteProductGroupPriority, $cur_page, $per_page) {
            $month_from                       = $productGroupPriority->period_from ? 'Chu kỳ: ' . Helper::getPeriodByMonth(Carbon::parse($productGroupPriority->period_from)->month) . ' / ' . Carbon::parse($productGroupPriority->period_from)->year : '';
            $month_to                         = $productGroupPriority->period_to ? 'Chu kỳ: ' . Helper::getPeriodByMonth(Carbon::parse($productGroupPriority->period_to)->month) . ' / ' . Carbon::parse($productGroupPriority->period_to)->year : 'Mãi ';
            $productGroupPriority->stt        = ($key + 1) + ($cur_page - 1) * $per_page;
            $productGroupPriority->updated_at = isset($productGroupPriority->updated_at) ? Carbon::parse($productGroupPriority->updated_at) : '';
            $productGroupPriority->product    = ($productGroupPriority->product_name ?? '') . ' - ' . ($productGroupPriority->product_code ?? '');
            $productGroupPriority->sub_group  = ($productGroupPriority->productGroup->name ?? '') . ' - ' . ($productGroupPriority->productSubGroup->name ?? '');
            $productGroupPriority->periods    = '<div>' . $month_from . '</div>' . '<div>' . $month_to . '</div>';
            $productGroupPriority->priority   = match ($productGroupPriority->priority) {
                ProductGroupPriority::PRIORITY => '<span class="badge badge-light-success rounded-3" style="padding: 5px 10px">' . ProductGroupPriority::PRIORITY_TEXTS[ProductGroupPriority::PRIORITY] . '</span>',
                ProductGroupPriority::NOPRIORITY => '<span class="badge badge-light-secondary rounded-3" style="padding: 5px 10px">' . ProductGroupPriority::PRIORITY_TEXTS[ProductGroupPriority::NOPRIORITY] . '</span>',
            };

            if ($canEditProductGroupPriority) {
                $productGroupPriority->features .= '<a class="btn btn-sm btn-icon"
                   href="' . route('admin.product-group-priorities.edit', $productGroupPriority->id) . '">
                    <i data-feather="edit" class="font-medium-2 text-body"></i>
                </a>';
            }

            if ($canDeleteProductGroupPriority) {
                $productGroupPriority->features .= '<button class="btn-delete-priorities btn btn-sm btn-icon delete-record waves-effect waves-float waves-light"
                    type="button"
                    data-action="' . route('admin.product-group-priorities.destroy', $productGroupPriority->id) . '">
                    <i data-feather="trash" class="font-medium-2 text-body"></i>
                </button>';
            }

            return $productGroupPriority;
        });

        return new TableHelper(
            collections: $productGroupPriorities,
            nameTable: 'product-group-priority-list',
        );
    }

    // Trong 1 khoảng thời gian một sản phẩm chỉ có 1 ưu tiên
    // Return : true is conflic | false is not conflic
    public function checkConflictPeriod(
        $productType,
        $product_id,
        $start_date,
        $end_date,
        $productGroupPriorityId = null,
        $store_type,
        $region_apply
    ): bool
    {
        $product_id = $product_id ?? '';

        $products = $this->repository->getProductGroupPriorityByProductId(
            $productType,
            $product_id,
            $productGroupPriorityId,
            $store_type,
            $region_apply
        );

        if (!$products) return false;

        foreach ($products as $_product) {
            $periorFrom = $_product['period_from'];
            $periorTo   = $_product['period_to'];

//            echo "select day: $start_date <br>";
//            echo "exist day: $periorFrom <br>";

            // die();
            if ($end_date == null) {
                if (strtotime($start_date) <= strtotime($periorFrom) && $periorTo == null) return true;
            } else if ($periorTo != null) {
                if (strtotime($start_date) >= strtotime($periorFrom) ||
                    strtotime($end_date) <= strtotime($periorTo)) return true;
            }


            //$tmp_from = $_product['period_from'] ? Carbon::parse($_product['period_from'])->format('Y-m-d') : 0;
            //$tmp_to   = $_product['period_to'] ? Carbon::parse($_product['period_to'])->format('Y-m-d') : ProductGroupPriority::PERIOD_FOREVER;


            // if($periorTo == null){
//                var_dump($periorFrom);
//                dd($start_date);
            //if(strtotime($start_date) <= strtotime($periorFrom)) return true;
            //}else{
            //if(strtotime($periorFrom) > strtotime($start_date)) return true;
            //if(strtotime())
            // }

//            if ($start_date >= $tmp_from && $start_date <= $tmp_to) return true;
//
//            if ($end_date >= $tmp_from && $end_date <= $tmp_to) return true;

        }
        //die();
        return false;
    }

    public function create(array $attributes = [])
    {
        $product_group            = $this->productGroupRepository->find($attributes['sub_group_id']);
        $attributes['period_to']  = $attributes['period_to'] == ProductGroupPriority::PERIOD_FOREVER ? null : $attributes['period_to'];
        $attributes['group_id']   = $product_group->parent_id ?? 0;
        $attributes['priority']   = $attributes['priority'] ?? 0;
        $attributes['created_by'] = Auth::id();
        $attributes['status']     = 1;

        return $this->repository->create($attributes);
    }

    public function update(int $id, array $attributes = [])
    {
        $productGroupPriority = $this->repository->find($id);
        $current_date         = Carbon::now()->format('Y-m-d');
//        $period_from          = $productGroupPriority->period_from ?? $current_date;
        //$period_to            = $attributes['period_to'] == ProductGroupPriority::PERIOD_FOREVER ? null : $attributes['period_to'];

//        dd($attributes);

//        dd($attributes);
//
//        if ($period_from > $current_date) {
        $product_group          = $this->productGroupRepository->find($attributes['sub_group_id']);
        $group_id               = $product_group->parent_id ?? 0;
        $attributes['group_id'] = $group_id;
//            $attributes['period_to'] = $period_to;
        $attributes['priority'] = $attributes['priority'] ?? 0;
        $arr                    = $attributes;
//        } else {
//            $arr['period_to'] = $period_to;
//        }

        return $this->repository->update($id, $arr);
    }
}
