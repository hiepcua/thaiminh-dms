<?php

namespace App\Services;

use App\Helpers\TableHelper;
use App\Models\Product;
use App\Models\User;
use App\Helpers\Helper;
use App\Repositories\Product\ProductRepository;
use App\Repositories\ProductGroupPriority\ProductGroupPriorityRepositoryInterface;

class ProductService extends BaseService
{
    protected $repository;
    protected $productGroupPriorityRepository;

    public function __construct(
        ProductRepository                       $repository,
        ProductGroupPriorityRepositoryInterface $productGroupPriorityRepository,
    )
    {
        parent::__construct();
        $this->repository                     = $repository;
        $this->productGroupPriorityRepository = $productGroupPriorityRepository;
    }

    public function setModel()
    {
        return new Product();
    }

    public function formOptions($model = null): array
    {
        $options                   = parent::formOptions($model); // TODO: Change the autogenerated stub
        $options['root_products']  = Product::query()->where('parent_id', 0)->get();
        $options['all_users']      = User::query()->where('status', 1)->get(['id', 'email', 'name']);
        $options['period_options'] = Helper::periodOptions();
        $options['status']         = Product::STATUS_TEXTS;

        return $options;
    }

    public function getTable($requestParams = [], $showOption = [])
    {
        $showOption = array_merge([
            "perPage" => config("table.default_paginate"),
            "orderBy" => [
                [
                    "column" => "products.created_at",
                    "type"   => "DESC"
                ]
            ]
        ], $showOption);

        $products = $this->repository->getByRequest(
            with: [],
            requestParams: $requestParams,
            showOption: $showOption
        );

        $currentUser    = Helper::currentUser();
        $canEditProduct = $currentUser->can('sua_san_pham');
        $cur_page       = $products->currentPage();
        $per_page       = $products->perPage();

        $products->map(function ($product, $key) use ($canEditProduct, $cur_page, $per_page) {
            $product->stt = ($key + 1) + ($cur_page - 1) * $per_page;

            $product->status = match ($product->status) {
                Product::STATUS_ACTIVE => '<span class="badge badge-light-success rounded-3" style="padding: 5px 10px">' . Product::STATUS_TEXTS[Product::STATUS_ACTIVE] . '</span>',
                Product::STATUS_INACTIVE => '<span class="badge badge-light-secondary rounded-3" style="padding: 5px 10px">' . Product::STATUS_TEXTS[Product::STATUS_INACTIVE] . '</span>',
                default => '<span class="badge badge-light-secondary rounded-3" style="padding: 5px 10px">' . Product::STATUS_TEXTS[Product::STATUS_INACTIVE] . '</span>',
            };

            $product->company_name    = Product::COMPANIES[$product->company_id] ?? '';
            $product->wholesale_price = $product->wholesale_price ? number_format($product->wholesale_price, 0, '', '.') : '';
            $product->price           = $product->price ? number_format($product->price, 0, '', '.') : '';

            if ($canEditProduct) {
                $product->features .= '<a class="btn btn-sm btn-icon"
                   href="' . route('admin.product-group-priorities.history', $product->id) . '">
                    <i data-feather="airplay" class="font-medium-2 text-body"></i>
                </a>';

                $product->features .= '<a class="btn btn-sm btn-icon"
                   href="' . route('admin.products.edit', $product->id) . '">
                    <i data-feather="edit" class="font-medium-2 text-body"></i>
                </a>';
            }

            return $product;
        });

        return new TableHelper(
            collections: $products,
            nameTable: 'product-list',
        );
    }
}
