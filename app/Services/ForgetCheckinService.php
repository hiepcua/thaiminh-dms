<?php

namespace App\Services;

use App\Helpers\Helper;
use App\Models\Organization;
use App\Repositories\Checkin\CheckinRepositoryInterface;
use App\Repositories\ForgetCheckin\ForgetCheckinRepositoryInterface;
use App\Repositories\Organization\OrganizationRepositoryInterface;
use App\Repositories\Store\StoreRepositoryInterface;
use App\Repositories\User\UserRepositoryInterface;
use App\Services\BaseService;
use App\Models\ForgetCheckin;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;

class ForgetCheckinService extends BaseService
{
    protected $repository;
    protected $checkinRepository;
    protected $organizationRepository;
    protected $userRepository;
    protected $storeRepository;

    public function __construct(
        ForgetCheckinRepositoryInterface $repository,
        CheckinRepositoryInterface       $checkinRepository,
        OrganizationRepositoryInterface  $organizationRepository,
        UserRepositoryInterface          $userRepository,
        StoreRepositoryInterface         $storeRepository
    )
    {
        parent::__construct();

        $this->repository             = $repository;
        $this->checkinRepository      = $checkinRepository;
        $this->organizationRepository = $organizationRepository;
        $this->userRepository         = $userRepository;
        $this->storeRepository        = $storeRepository;
    }

    public function setModel()
    {
        return new ForgetCheckin();
    }

    public function formOptions($model = null): array
    {
        $options = parent::formOptions($model); // TODO: Change the autogenerated stub
        if ($model) {
            $checkin                                  = $this->checkinRepository->find($model->checkin_id);
            $options['default_values']['store_id']    = old('store_id') ?? $checkin->store_id;
            $options['default_values']['checkin_at']  = old('checkin_at') ?? $checkin->checkin_at;
            $options['default_values']['checkout_at'] = old('checkout_at') ?? $checkin->checkout_at;
            $options['default_values']['tdv_id']      = old('tdv_id') ?? $checkin->created_by;
        } else {
            $options['default_values']['store_id']    = old('store_id') ?? null;
            $options['default_values']['checkin_at']  = old('checkin_at') ?? null;
            $options['default_values']['checkout_at'] = old('checkout_at') ?? null;
            $options['default_values']['tdv_id']      = old('tdv_id') ?? null;
        }

        $currentUser = Helper::currentUser();

        $userOrganizations = Helper::getUserOrganization($currentUser);

        if (!count($userOrganizations)) {
            $userOrganizations[Organization::TYPE_DIA_BAN] = $this->organizationRepository
                ->getLocalityActive()->pluck('id')->toArray();
        }

        $options['stores'] = $this->storeRepository
            ->getByLocality($userOrganizations[Organization::TYPE_DIA_BAN] ?? [])
            ->pluck('name', 'id')->toArray();

        $options['tdvs'] = $this->userRepository
            ->getByOrganization($userOrganizations[Organization::TYPE_DIA_BAN] ?? [])
            ->pluck('name', 'id')->toArray();

        return $options;
    }

    public function forgetCheckout($checkinId, $creatorNote)
    {
        try {
            $checkinRecord = $this->checkinRepository->find($checkinId);
            if ($checkinRecord) {
                $this->model->create([
                    'checkin_id'   => $checkinId,
                    'creator_note' => $creatorNote,
                    'created_by'   => Helper::currentUser()->id,
                    'status'       => ForgetCheckin::STATUS_REVIEW
                ]);

                return [
                    'result'  => true,
                    'message' => 'Tạo đề xuất thành công.'
                ];
            }

            return [
                'result'  => false,
                'message' => 'Không tìm thấy thông tin checkin!'
            ];
        } catch (\Exception $e) {
            Log::error(__METHOD__ . ' error: ' . $e->getMessage());
            Log::error($e);

            return [
                'result'  => false,
                'message' => 'Có lỗi xảy ra.'
            ];
        }
    }

    public function changeStatus($id, $status, $reviewerNote)
    {
        try {
            $forgetCheckoutRecord = $this->repository->find($id);
            if ($forgetCheckoutRecord) {
                $forgetCheckoutRecord->status        = $status;
                $forgetCheckoutRecord->reviewer_note = $reviewerNote;
                $forgetCheckoutRecord->updated_by    = Helper::currentUser()->id;

                $forgetCheckoutRecord->save();

                return [
                    'result'  => true,
                    'message' => 'Duyệt đề xuất thành công.'
                ];
            }

            return [
                'result'  => false,
                'message' => 'Không tìm thấy thông tin đề xuất!'
            ];
        } catch (\Exception $e) {
            Log::error(__METHOD__ . ' error: ' . $e->getMessage());
            Log::error($e);

            return [
                'result'  => false,
                'message' => 'Có lỗi xảy ra.'
            ];
        }
    }

    public function createByASM($data)
    {
        try {
            DB::beginTransaction();

            $currentUser = Helper::currentUser();
            $store = $this->storeRepository->find($data['store_id']);
            if (!$store) {
                return [
                    'result' => false,
                    'message' => "Không tìm thấy nhà thuốc"
                ];
            }

            $checkin = $this->checkinRepository->create([
                "store_id" => $data['store_id'],
                "lng" => $store->lng,
                "lat" => $store->lat,
                "checkin_at" => $data['checkin_at'] . ':00',
                "checkout_at" => $data['checkout_at'] . ':00',
                "created_by" => $data['tdv_id'],
                "updated_by" => $currentUser->id,
            ]);

            $this->repository->create([
                'checkin_id' => $checkin->id,
                'creator_note' => "Quên checkout",
                'reviewer_note' => $data['reviewer_note'],
                'created_by' => $currentUser->id,
                'updated_by' => $currentUser->id,
                'status' => ForgetCheckin::STATUS_APPROVE,
            ]);

            DB::commit();

            return [
                'result' => true,
                'message' => 'Tạo đề xuất thành công!'
            ];
        } catch (\Exception $e) {
            DB::rollBack();
            Log::error(__METHOD__ . ' error: ' . $e->getMessage());
            Log::error($e);

            return [
                'result' => false,
                'message' => 'Có lỗi xảy ra. Vui lòng thử lại sau'
            ];
        }
    }
}
