<?php

namespace App\Services;

use App\Helpers\Helper;
use App\Helpers\TableHelper;
use App\Models\Organization;
use App\Models\Province;
use App\Models\ReportRevenueStore;
use App\Models\RevenuePeriod;
use App\Repositories\ReportRevenuePharmacy\ReportRevenuePharmacyRepositoryInterface;
use App\Services\BaseService;
use Carbon\Carbon;

class ReportRevenuePharmacyService extends BaseService
{
    protected $repository;

    public function __construct(ReportRevenuePharmacyRepositoryInterface $repository)
    {
        parent::__construct();

        $this->repository = $repository;
    }

    public function setModel()
    {
        return new ReportRevenueStore();
    }


    public function formOptions($model = null): array
    {
        $options       = parent::formOptions($model); // TODO: Change the autogenerated stub
        $default_range = request('search.from_to');
//        dd($default_range);
        $searchBookingAt = $default_range;
        if (!$default_range) {
            $searchBookingAt = request('search.range_date', implode(' to ', Helper::defaultMonthFromToDate()));
        }
        $options['default_range'] = $searchBookingAt;


        $listProvinces = Province::query()->get();

        $optionProvices = [0 => '--Chọn Tỉnh/Thành phố--'];
        foreach ($listProvinces as $_provinces) {
            $_provincesId                  = $_provinces["id"];
            $optionProvices[$_provincesId] = $_provinces["province_name"];
        }
        $options['option_provinces'] = $optionProvices;
        $options['region']           = [
            0    => 'Chọn miền',
            'MB' => 'Miền Bắc',
            'MN' => 'Miền Nam',
        ];
        return $options;
    }

    public function formatDate($date)
    {
        $bits = explode('/', $date);
//        dd($date, $bits);
        $year   = $bits[2];
        $month  = $bits[1];
        $day    = $bits[0];
        $format = $year . '/' . $month . '/' . $day;
        return $format;
    }

    public function handleDatePicker($baseRequest)
    {
        $result = [
            'from_date' => null,
            'to_date'   => null
        ];
        if ($baseRequest) {
            $tmp = explode(' - ', $baseRequest);
//            dd($tmp);
            $from_date = $this->formatDate($tmp[0]);
            $to_date   = $this->formatDate($tmp[1]);

            $result['from_date'] = date('Y-m-d', strtotime($from_date));

            $dateEnd = null;
            if (!empty($tmp[1])) {
                $mkDateEnd = strtotime($to_date);
                $dateEnd   = date('Y-m-d', $mkDateEnd);
            }

            $result['to_date'] = $dateEnd;

            if ($result['to_date'] == null) {
                $result['to_date'] = $result['from_date'];
            }


        }
        return $result;
    }

    public function queryBookingDate()
    {
        return [
            'from' => now()->setDay(1)->format('Y-m-d'),
            'to'   => now()->format('Y-m-d')
        ];
    }


    public function getTableData($requestParams = [], $showOption = [])
    {
        if (empty($requestParams['from_to'])) {
            $requestParams['range_date'] = $this->queryBookingDate();
            $requestParams['from_to']    = request('search.from_to', implode(' to ', Helper::defaultMonthFromToDate()));
        } else {
            $requestParams['range_date'] = $this->handleDateRangeData($requestParams['from_to']);
        }

        $showOption    = array_merge([
            "perPage" => config("table.default_paginate"),
            "orderBy" => [
                [
                    "column" => "report_revenue_store.id",
                    "type"   => "DESC"
                ]
            ]
        ], $showOption);
        $revenuePharmacy = $this->repository->getByRequest(
            with: [],
            requestParams: $requestParams,
            showOption: $showOption
        );

        $cur_page = $revenuePharmacy->currentPage();
        $per_page = $revenuePharmacy->perPage();

        $revenuePharmacy->map(function ($pharmacy_item, $key) use ($cur_page, $per_page, $requestParams) {
            $pharmacy_item->stt = ($key + 1) + ($cur_page - 1) * $per_page;
//            $pharmacy_item->pharmacy_name     = $pharmacy_item->pharmacy->name ?? '';

            $pharmacy_item->pharmacy_name    = '<a
                   href="' . route('admin.report.pharmacy-revenue.detail', [$pharmacy_item->store_id, 'from_to=' . $requestParams['from_to']]) . '">
                    ' . $pharmacy_item->pharmacy->name ?? "-" . '
                </a>';
            $pharmacy_item->total_order    = '<a
                   href="' . route('admin.store-orders.index', ['search%5Bbooking_at%5D='. $requestParams['from_to'], 'search%5Bstore_code%5D='.$pharmacy_item->pharmacy->code]) . '">
                    ' . $pharmacy_item->total_order. '
                </a>';

            $pharmacy_item->region           = $pharmacy_item->pharmacy?->province?->region ?? '-';
            $pharmacy_item->pharmacy_code    = $pharmacy_item->pharmacy->code ?? '';
            $pharmacy_item->pharmacy_zone    = $pharmacy_item->pharmacy_type;
//            $pharmacy_item->total_order      = $pharmacy_item->sum_total_order;
            $pharmacy_item->total_sub_amount = Helper::formatPrice($pharmacy_item->sum_total_sub_amount) . 'đ';
            $pharmacy_item->total_discount   = Helper::formatPrice($pharmacy_item->sum_total_discount) . 'đ';
            $pharmacy_item->total_amount     = Helper::formatPrice($pharmacy_item->sum_total_amount) . 'đ';

//            dd($pharmacy_item-> total_sub_amount);

            return $pharmacy_item;
        });
        $classCustom = [
            'total_sub_amount' => 'text-end',
            'total_discount'   => 'text-end',
            'total_amount'     => 'text-end',
            'total_order'     => 'text-end',
        ];

        return new TableHelper(
            collections: $revenuePharmacy,
            nameTable: 'revenue-pharmacy-list',
            classCustom: $classCustom,
        );
    }

    public function getTableDetailData($pharmacy_id, $from_to, $showOption)
    {
        if (empty($from_to)) {
            $range_date = $this->queryBookingDate();
        } else {
            $range_date = $this->handleDateRangeData($from_to);
        }

        $revenuePharmacy = $this->repository->getByIdPharmacy($pharmacy_id, $range_date, $showOption);

//        $cur_page = $revenuePharmacy->currentPage();
//        $per_page = $revenuePharmacy->perPage();

        $revenuePharmacy->map(function ($pharmacy_item, $key) {
            $pharmacy_item->stt          = ($key + 1);
            $pharmacy_item->sub_total    = Helper::formatPrice($pharmacy_item->sub_total) . 'đ';
            $pharmacy_item->discount     = Helper::formatPrice($pharmacy_item->discount) . 'đ';
            $pharmacy_item->total_amount = Helper::formatPrice($pharmacy_item->total_amount) . 'đ';
            $pharmacy_item->product_qty     = $pharmacy_item->all_qty_product;
            $pharmacy_item->product_name = $pharmacy_item->product_type =='gift'? $pharmacy_item->product_name .'<span class="btn btn-sm btn-icon" style="color: red">
                    <i data-feather="gift"></i>
                </span>' : $pharmacy_item->product_name ;

            return $pharmacy_item;
        });
        $classCustom = [
            'sub_total' => 'text-end',
            'discount'   => 'text-end',
            'total_amount'     => 'text-end',
            'product_qty' => 'center'
        ];

        return new TableHelper(
            collections: $revenuePharmacy,
            nameTable: 'detail-revenue-pharmacy',
            classCustom: $classCustom,
            isPagination: false,
        );
    }


    public function exportReport($hash_id, $requestParams, $showOption)
    {
        if (empty($requestParams['from_to'])) {
            $requestParams['range_date'] = $this->queryBookingDate();
        } else {
            $requestParams['range_date'] = $this->handleDateRangeData($requestParams['from_to']);
        }

        $query          = $this->repository->getDataExport(
            with: [],
            requestParams: $requestParams,
            showOption: $showOption
        );
        $file_name      = 'revenue_pharmacy' . '_' . Carbon::now()->timestamp . "_.csv";
        $export_data    = request()->get('export_revenue_pharmacy', cache()->get($hash_id)) ?: [];
        $export_options = [
            'hash_id'   => $hash_id,
            'file_name' => $file_name,
            'file_dir'  => 'download_bao_cao_doanh_thu_nha_thuoc',
            'headers'   => [
                "STT",
                "NT",
                "Mã NT",
                "Địa bàn",
                "Quận/Huyện",
                "Tỉnh/Thành phố",
                "Miền",
                "Tổng đơn hàng",
                "Tổng doanh thu",
                "Tổng chiết khấu",
                "Tổng doanh thu sau chiết khấu",
            ],
            'limit'     => 500,
        ];
        if (!$export_data) {
            $export_options['total'] = $query->getQuery()->getCountForPagination();
        }
        $exportService = new ExportService($export_data, $query, $export_options);

        $count       = 1;
        $export_data = $exportService->exportProgress(function ($revenue, $key) use (&$count) {
            $result = [
                $count,
                $revenue->agency_name,
                $revenue->pharmacy_code,
                $revenue->pharmacy_organization,
                $revenue->pharmacy_district,
                $revenue->pharmacy_province,
                $revenue->pharmacy?->province?->region ?? '-',
                $revenue->sum_total_order,
                Helper::formatPrice($revenue->sum_total_sub_amount) . 'đ',
                Helper::formatPrice($revenue->sum_total_discount) . 'đ',
                Helper::formatPrice($revenue->sum_total_amount) . 'đ'
            ];
            $count++;

            return $result;
        });

        return response()->json($export_data);
    }


}
