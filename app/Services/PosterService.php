<?php

namespace App\Services;

use App\Helpers\Helper;
use App\Helpers\TableHelper;
use App\Models\File;
use App\Models\PosterAcceptanceDate;
use App\Models\PosterOrganization;
use App\Models\PosterStoreRegister;
use App\Models\Product;
use App\Models\User;
use App\Repositories\Organization\OrganizationRepositoryInterface;
use App\Repositories\Poster\PosterRepositoryInterface;
use App\Repositories\PosterAcceptanceDate\PosterAcceptanceDateRepositoryInterface;
use App\Services\BaseService;
use App\Models\Poster;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Storage;
use function PHPUnit\Framework\assertTrue;

class PosterService extends BaseService
{
    protected $repository;
    protected $organizationRepository;
    protected $posterAcceptanceDateRepository;

    public function __construct(PosterRepositoryInterface               $repository,
                                OrganizationRepositoryInterface         $organizationRepository,
                                PosterAcceptanceDateRepositoryInterface $posterAcceptanceDateRepository)
    {
        parent::__construct();

        $this->repository                     = $repository;
        $this->organizationRepository         = $organizationRepository;
        $this->posterAcceptanceDateRepository = $posterAcceptanceDateRepository;
    }

    public function setModel()
    {
        return new Poster();
    }

    public function formOptions($model = null): array
    {
        $options                                 = parent::formOptions($model); // TODO: Change the autogenerated stub
        $options['root_products']                = Product::query()->where('parent_id', 0)->get();
        $options['month']                        = [
            '1' => '1 Tháng',
            '2' => '2 Tháng',
            '3' => '3 Tháng',
            '4' => '4 Tháng',
        ];
        $options['default_values']['range_date'] = "";
        if (isset($model)) {
            $zone_id_selected                             = $model->organizations()->pluck('organizations.id')->toArray();
            $acceptance_date                              = $model->accptance_date_list()->get();

            $acceptance_date->map(function ($item) {
                $item->from_to = $item->acceptance_start_date . ' to ' . $item->acceptance_end_date;
        });
//            dd($acceptance_date->toArray());
            $options['default_values']['acceptance_date'] = $acceptance_date->toArray();
            $options['default_values']['division_id']     = $zone_id_selected;
            $options['default_values']['range_date']      = $model->start_date . ' to ' . $model->end_date;
        }

        $optionProducts = [0 => '--Chọn sản phẩm--'];
        foreach ($options['root_products'] as $_product) {
            $_productId                  = $_product["id"];
            $optionProducts[$_productId] = $_product["name"];
        }
        $options['option_products'] = $optionProducts;
        $options['default_values']['images'] = $this->repository->getImages($options['default_values']['id']);
        return $options;
    }


    public function getTable($requestParams = [], $showOption = [])
    {
        $showOption    = array_merge([
            "perPage" => config("table.default_paginate"),
            "orderBy" => [
                [
                    "column" => "posters.created_at",
                    "type"   => "DESC"
                ]
            ]
        ], $showOption);
        $posters       = $this->repository->getByRequest(
            with: [],
            requestParams: $requestParams,
            showOption: $showOption
        );
        $currentUser   = Helper::currentUser();
        $canEditPoster = $currentUser->can('xem_chuong_trinh_treo_poster');
        $cur_page      = $posters->currentPage();
        $per_page      = $posters->perPage();

        $posters->map(function ($poster, $key) use ($canEditPoster, $cur_page, $per_page) {
            $poster->stt          = ($key + 1) + ($cur_page - 1) * $per_page;
            $poster->product_name = $poster->product->name ?? '';
            $poster->date_apply   = date('d/m/Y', strtotime($poster->start_date)) . ' - ' . date('d/m/Y', strtotime($poster->end_date));
            $poster->reward       = $poster->reward_month . ' tháng - ' . $poster->reward_amount . ' sp';

            $accptance_list = '';
            foreach ($poster->accptance_date_list as $date) {
                $accptance_list .= '<p>
                                ' . date('d/m/Y', strtotime($date->acceptance_start_date)) . ' - ' . date('d/m/Y', strtotime($date->acceptance_end_date)) . ' <br>
                            </p>';
            }
            $poster->accptance_list = $accptance_list;

            $zone_list = '';
            foreach ($poster->organizations as $zone) {
                $zone_list .= '
                                <span class="badge bg-success">
                                                ' . $zone->name . '
                                            </span>';
            }
            $poster->zones_list = $zone_list;
            if ($canEditPoster) {
                $poster->action .= '<a class="btn btn-sm btn-icon"
                   href="' . route('admin.posters.edit', $poster->id) . '">
                    <i data-feather="edit" class="font-medium-2 text-body"></i>
                </a>';
                $poster->action .= view('component.btn-delete', [
                    'route'       => route('admin.posters.destroy', $poster->id),
                    'titleDelete' => 'Bạn có chắc chắn muốn xóa chương trình Poster?'
                ]);
            }
            $image = '';
            $getImage = $this->repository->getImages($poster->id);
            if ($getImage) {

                $path  = str_replace('public', 'storage', $getImage->source);
                $image = '<img style="max-width:100px;" src="' . $path . '">';
            }
            $poster->image = $image;
            return $poster;
        });

        return new TableHelper(
            collections: $posters,
            nameTable: 'poster-list',
        );
    }


    public function create($attributes)
    {
        $range = $this->handleDateRangeData($attributes['range_date'] ?? []);

        $attributes['start_date'] = isset($range['from']) ? ($range['from'] . ' 00:00:00') : null;
        $attributes['end_date']   = isset($range['to']) ? ($range['to'] . ' 23:59:59') : null;
        $acceptance_array         = [];
        foreach ($attributes['acceptance_date'] as $item) {
            $acceptance_range_date         = $this->handleDateRangeData($item['from_to'] ?? []);
            $item['acceptance_start_date'] = isset($acceptance_range_date['from']) ? ($acceptance_range_date['from'] . ' 00:00:00') : null;
            $item['acceptance_end_date']   = isset($acceptance_range_date['to']) ? ($acceptance_range_date['to'] . ' 23:59:59') : null;
            $acceptance_array[]            = $item;
        }
        $attributes['acceptance_date'] = json_encode($acceptance_array);

        $zones = $attributes['division_id'] ?? [];
        $poster = $this->repository->create($attributes);
        if (isset($attributes['image'])) {
            $image = $this->uploadImages($attributes['image'], $poster->id);
        }

        $this->posterAcceptanceDate($acceptance_array, $poster);
        $poster->organizations()->sync($zones);


    }

    public function posterAcceptanceDate($acceptance_array, mixed $poster = '')
    {
        foreach ($acceptance_array as $acceptance_date) {
            $this->posterAcceptanceDateRepository->create([
                'poster_id'             => $poster->id,
                'acceptance_start_date' => $acceptance_date['acceptance_start_date'],
                'acceptance_end_date'   => $acceptance_date['acceptance_end_date'],
            ]);
        }
    }

    public function update($attributes, $id)
    {
        $poster           = $this->repository->findOrFail($id);
        $acceptance_array = [];

        $range = $this->handleDateRangeData($attributes['range_date'] ?? []);
        $attributes['start_date'] = isset($range['from']) ? ($range['from'] . ' 00:00:00') : null;
        $attributes['end_date']   = isset($range['to']) ? ($range['to'] . ' 23:59:59') : null;

        foreach ($attributes['acceptance_date'] as $item) {
            $acceptance_range_date         = $this->handleDateRangeData($item['from_to'] ?? []);
            $item['acceptance_start_date'] = isset($acceptance_range_date['from']) ? ($acceptance_range_date['from'] . ' 00:00:00') : null;
            $item['acceptance_end_date']   = isset($acceptance_range_date['to']) ? ($acceptance_range_date['to'] . ' 23:59:59') : null;
            $acceptance_array[]            = $item;
        }
        $zones = $attributes['division_id'] ?? [];

        $poster->organizations()->detach();
        PosterAcceptanceDate::where('poster_id', $id)->delete();
        if (isset($attributes['image'])) {
            $this->repository->deleteImage($poster);
            $image = $this->uploadImages($attributes['image'], $poster->id);
        }

        $poster->organizations()->sync($zones);
        $this->posterAcceptanceDate($acceptance_array, $poster);
        $this->repository->update($id, $attributes);

        $result['message'] = 'Sửa thành công';
        $result['icon']    = 'success';

    }

    public function destroy($id)
    {
        PosterAcceptanceDate::where('poster_id', $id)->delete();
        PosterOrganization::where('poster_id', $id)->delete();

        $result['message'] = 'Xóa thành công';
        $result['icon']    = 'success';

    }


    public function uploadImages($image, $id): ?array
    {
        if (!empty($image)) {
//            foreach ($images as $image) {
                $mime_type = $image->getMimeType();
                $file_name = $image->getClientOriginalName();
                $path      = Storage::putFile('public/images/posters', $image);
                $file      = File::create([
                    'mime_type'       => $mime_type,
                    'name'            => $file_name,
                    'disk_name'       => pathinfo($path)['basename'],
                    'source'          => $path,
                    'created_by'      => Auth::id(),
                    'attachment_id'   => $id,
                    'attachment_type' => Poster::class,
                    'field'           => 'image',
                ]);
//            }
        }
        return $fileIds ?? null;
    }
}
