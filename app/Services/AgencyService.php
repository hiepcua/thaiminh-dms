<?php

namespace App\Services;

use App\Helpers\Helper;
use App\Helpers\TableHelper;
use App\Models\Agency;
use App\Models\AgencyOrder;
use App\Models\Organization;
use App\Models\Province;
use App\Repositories\Organization\OrganizationRepositoryInterface;
use App\Repositories\Province\ProvinceRepositoryInterface;
use App\Repositories\User\UserRepositoryInterface;
use App\Services\BaseService;
use App\Repositories\Agency\AgencyRepositoryInterface;
use Illuminate\Http\Response;
use Illuminate\Support\Facades\Log;

class AgencyService extends BaseService
{
    protected $repository;
    protected $organizationRepository;
    protected $provinceRepository;

    public function __construct(
        AgencyRepositoryInterface         $repository,
        OrganizationRepositoryInterface   $organizationRepository,
        ProvinceRepositoryInterface       $provinceRepository,
        protected UserRepositoryInterface $userRepository,
    )
    {
        parent::__construct();

        $this->repository             = $repository;
        $this->organizationRepository = $organizationRepository;
        $this->provinceRepository     = $provinceRepository;
    }

    public function setModel()
    {
        return new Agency();
    }

    public function formOptions($model = null): array
    {
        $options              = parent::formOptions($model); // TODO: Change the autogenerated stub
        $options['divisions'] = $this->organizationRepository->getDivisionsActive();
        if (isset($model)) {
            $divisions               = $this->repository->getDivision($model->id);
            $options['locality_ids'] = $this->organizationRepository->getLocalityByDivision($divisions);
        } else {
            $options['locality_ids'] = [];
        }

        if (request()->route()->getName() == 'admin.agency.index') {
            $options['locality_ids'] = $this->organizationRepository->getLocalityByDivision(request('search.division_id', null));
        }

        $options['status'] = Agency::STATUS_TEXTS;
        $options['areas']  = [];

        $options['default_values']['status'] = Agency::STATUS_ACTIVE;
        if (old('division_id')) {
            $options['locality_ids']                   = $this->organizationRepository->getLocalityByDivision(old('division_id'));
            $options['default_values']['division_id']  = old('division_id');
            $options['default_values']['locality_ids'] = old('locality_ids');
        } else {
            if (request()->route()->getName() == 'admin.agency.show') {
                $options['default_values']['division_id']  = isset($model)
                    ? $this->repository->getDivision($model->id) ?? []
                    : [];
                $options['default_values']['locality_ids'] = isset($model)
                    ? $this->repository->getLocalities($model->id)->pluck('id')->toArray()
                    : [];
            } else {
                $options['default_values']['division_id']  = isset($model)
                    ? $this->repository->getDivision($model->id) ?? []
                    : [];
                $options['default_values']['locality_ids'] = isset($model)
                    ? $this->repository->getLocalities($model->id)->pluck('id')->toArray()
                    : [];
            }
        }
        $options['tdv_users'] = [];
        if ($options['default_values']['locality_ids']) {
            $options['tdv_users'] = $this->userRepository->getByOrganizations($options['default_values']['locality_ids'], 'TDV');
        }

        return $options;
    }

    public function generateCode($prefixCode)
    {
        $prefixCode = 'DL' . $prefixCode;
        $maxNumber  = $this->repository->getByPrefixCode($prefixCode)
            ->map(function ($agency) {
                $exp = "/.*(?:\D|^)(\d+)/";
                preg_match($exp, $agency->code, $matches);
                $agency->max_number = $matches[1] ?? 0;
                return $agency;
            })
            ->max('max_number');
        $newCode    = $prefixCode . str_pad(($maxNumber + 1), 2, '0', STR_PAD_LEFT);
        if ($this->repository->checkCodeExists($newCode)) {
            self::generateCode($prefixCode);
        }

        return $newCode;
    }

    public function create($attributes)
    {
        $province                  = $this->provinceRepository->getByCode($attributes['province_for_code'] ?? null);
        $attributes['province_id'] = $province?->id;
        $attributes['is_user']     = !empty($attributes['tdv_user_id']) ? Agency::IS_USER : Agency::ISNT_USER;
        $agency                    = $this->repository->create($attributes);

        $agency->organizations()->sync($attributes['locality_ids'] ?? []);
        $this->updateValueTDV($agency->id, $attributes);
    }

    public function update($id, $attributes)
    {
        $agency = $this->repository->findOrFail($id);

        $attributes['is_user'] = !empty($attributes['tdv_user_id']) ? Agency::IS_USER : Agency::ISNT_USER;

        $agency->organizations()->detach();

        $this->repository->update($id, $attributes);

        $agency->organizations()->sync($attributes['locality_ids'] ?? []);
        $this->updateValueTDV($id, $attributes);
    }

    public function updateValueTDV($agencyId, $attributes)
    {
        if (empty($attributes['tdv_user_id'])) {
            $this->userRepository->changeAgency($agencyId, 0);
        } else {
            $this->userRepository->changeAgency($agencyId, $attributes['tdv_user_id']);
        }
    }

    public function getTable($requestParams = [], $showOption = [])
    {
        $showOption = array_merge([
            "perPage" => config("table.default_paginate"),
            "orderBy" => [[
                "column" => "agencies.created_at",
                "type"   => "DESC"
            ]]
        ], $showOption);

        $requestParams['booking_at'] = $this->handleDateRangeData($requestParams['booking_at'] ?? '');

        $agencies = $this->repository->getDataForListScreen(
            withCount: ['agencyOrder', 'storeOrder'],
            requestParams: $requestParams,
            showOption: $showOption
        );

        $currentUser     = Helper::currentUser();
        $canDeleteAgency = $currentUser->can('xoa_dai_ly');
        $canEditAgency   = $currentUser->can('sua_dai_ly');

        $agencies->map(function ($agency) use ($canDeleteAgency, $canEditAgency) {
            if ($agency->agency_order_count || $agency->store_order_count) {
                $canDeleteAgency = false;
            }

            $localities = [];
            foreach ($agency->localies as $locality) {
                $localities[$locality->parent->name][] = $locality->name;
            }

            foreach ($localities as $key => $locality) {
                $localities[$key] = "<b class='text-primary'>$key</b>: " . implode(' ,', $locality);
            }

            $agency->localities = implode('<br>', $localities);

            $agency->features = "";
            if ($canEditAgency) {
                $agency->features .= '<a class="btn btn-sm btn-icon"
                   href="' . route('admin.agency.show', $agency->id) . '">
                    <i data-feather="edit" class="font-medium-2 text-body"></i>
                </a>';
            }
            if ($canDeleteAgency) {
                $agency->features .= '<button
                    class="btn-delete-agency btn btn-sm btn-icon delete-record waves-effect waves-float waves-light"
                    type="button"
                    data-action="' . route('admin.agency.destroy', $agency->id) . '">
                    <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14"
                         viewBox="0 0 24 24" fill="none" stroke="currentColor"
                         stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                         class="feather text-danger feather-trash font-medium-2 text-body">
                        <polyline points="3 6 5 6 21 6"></polyline>
                        <path
                            d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path>
                    </svg>
                </button>';
            }

            return $agency;
        });

        return new TableHelper(
            collections: $agencies,
            nameTable: 'agency-list',
        );
    }

    public function getOptionAgencyByLocality($agencyId)
    {
        $agencies = $this->repository->getByLocality($agencyId);

        $htmlString = "<option value='' class='ajax-agency-option'>- Đại lý -</option>";

        foreach ($agencies as $key => $agency) {
            $htmlString .= "<option value='$key' class='ajax-agency-option'>$agency</option>";
        }

        return $htmlString;
    }

    public function deleteAgency($agencyId)
    {
        try {
            $agency = $this->repository->find($agencyId, ['agencyOrder', 'storeOrder']);

            if (count($agency->agencyOrder) || count($agency->storeOrder)) {
                return [
                    'result'  => false,
                    'message' => 'Đại lý có thông tin về đơn hàng không được phép xóa',
                    'status'  => Response::HTTP_BAD_REQUEST
                ];
            }

            $this->repository->delete($agencyId);

            return [
                'result'  => true,
                'message' => 'Xóa đại lý thành công',
                'status'  => Response::HTTP_OK
            ];
        } catch (\Exception $e) {
            Log::error(__METHOD__ . ' error ' . $e->getMessage());
            Log::error($e);

            return [
                'result'  => false,
                'message' => 'Có lỗi xảy ra, vui lòng thử lại sau.',
                'status'  => Response::HTTP_INTERNAL_SERVER_ERROR
            ];
        }

    }
}
