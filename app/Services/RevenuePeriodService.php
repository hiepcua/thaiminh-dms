<?php

namespace App\Services;

use App\Helpers\Helper;
use App\Models\Product;
use App\Models\ProductGroup;
use App\Models\Rank;
use App\Models\RevenueProductCondition;
use App\Repositories\ProductGroupPriority\ProductGroupPriorityRepositoryInterface;
use App\Repositories\RevenuePeriod\RevenuePeriodRepositoryInterface;
use App\Models\RevenuePeriod;
use Illuminate\Support\Facades\Log;

class RevenuePeriodService extends BaseService
{
    protected $repository;
    protected $productPriprityRepository;

    public function __construct(
        RevenuePeriodRepositoryInterface        $repository,
        ProductGroupPriorityRepositoryInterface $productPriprityRepository
    )
    {
        parent::__construct();

        $this->repository                = $repository;
        $this->productPriprityRepository = $productPriprityRepository;
    }

    public function setModel()
    {
        return new RevenuePeriod();
    }

    private function getPeriodByProductType($productTypes)
    {
        $productTypePeriods = [];
        foreach ($productTypes as $_id => $_value) {
            $periodOfYear = $_value['period_of_year'];
//            $periodOfYear = 12;
            $productTypePeriods[$_id] = Helper::periodOptions(null, $periodOfYear);
//            dd($productTypePeriods[1]);
        }
        return $productTypePeriods;
    }

    public function formOptions($model = null): array
    {
        $productTypes = ProductGroup::PRODUCT_TYPES;

        $productTypes = collect($productTypes)->map(function ($_item) {
            $_item = $_item["text"];
            return $_item;
        });

        $options                  = parent::formOptions($model); // TODO: Change the autogenerated stub
        $options['product_types'] = ["0" => "- Loại hàng -"] + $productTypes->toArray();
        $options['ranks']         = ["" => "- Hạng -"] + Rank::all()->pluck("name", "id")->toArray();
        $options['products']      = Product::all();
        $options['periods']       = Helper::periodOptions() ?? [];
        $options['store_type']    = ['' => '- Loại nhà thuốc -'] + RevenuePeriod::STORE_TYPE_TEXTS;
        $options['region_apply']  = ['' => '- Miền áp dụng -'] + RevenuePeriod::REGION_APPLY_TEXTS;

        //dd($options['periods']);

        $periods = [];
        foreach ($options['periods'] as $option) {
            $periods[$option['started_at']] = $option['name'];
        }

        $options['periodsFrom'] = ["0" => "- Chu kỳ -"] + $periods;
        $product_groups         = ProductGroup::ofStatus(ProductGroup::STATUS_ACTIVE)->get();
        $parent_items           = $product_groups->where('parent_id', 0)
            ->map(function ($item) use ($product_groups) {
                $item->children = $product_groups->where('parent_id', $item->id);
                return $item;
            });

        $options['product_groups'] = $parent_items;

        $default_items = [];
        if ($model && $model->id) {
            foreach ($model->items as $_item) {
                $default_items[$_item->group_id][$_item->sub_group_id] = $_item->only([
                    'revenue_period_id',
                    'group_id',
                    'sub_group_id',
                    'revenue',
                    'discount_rate',
                    'priority_discount_rate',
                    'priority_product_min',
                ]);
                $conditions                                            = [];
                if ($_item->product_conditions && $_item->product_conditions->isNotEmpty()) {
                    foreach ($_item->product_conditions->groupBy('min_box') as $_min_box => $_items) {
                        $condition = [
                            'products' => [],
                            'min_box'  => $_min_box,
                        ];
                        foreach ($_items as $_child) {
                            $condition['products'][] = $_child->product_id;
                        }
                        $conditions[] = $condition;
                    }
                } else {
                    $conditions[] = [
                        'products' => [],
                        'min_box'  => '',
                    ];
                }
                //dd($conditions);
                $default_items[$_item->group_id][$_item->sub_group_id]['product_conditions'] = $conditions;
            }
        } else {
            foreach ($parent_items as $_parent) {
                foreach ($_parent->children as $_child) {
                    //dd($_child);
                    $default_items[$_parent->id][$_child->id] = [
                        'revenue_period_id'      => 0,
                        'group_id'               => $_parent->id,
                        'sub_group_id'           => $_child->id,
                        'revenue'                => '',
                        'discount_rate'          => '',
                        'priority_discount_rate' => '',
                        'priority_product_min'   => '',
                        'product_conditions'     => [
                            [
                                'products' => [],
                                'min_box'  => '',
                            ]
                        ],
                    ];
                }
            }

        }
        $options['default_values']['items'] = $default_items;

        return $options;
    }

    function create(array $attributes = [])
    {
        try {
            $oldRevenuePeriod = $this->repository->getOldRevenue([
                'product_type' => $attributes['product_type'] ?? null,
                'store_type'   => $attributes['store_type'] ?? null,
                'region_apply' => $attributes['region_apply'] ?? null,
                'rank_id'      => $attributes['rank_id'] ?? null,
                'period_from'  => $attributes['period_from'] ?? null,
                'period_to'    => $attributes['period_to'] ?? null,
            ]);

            if ($oldRevenuePeriod && ($attributes['status'] ?? null) == RevenuePeriod::STATUS_ACTIVE) {
                return [
                    'status'  => false,
                    'message' => 'Thời gian áp dụng hợp đồng KEY đã bị trùng'
                ];
            }

            $revenue_period = $this->repository->create($attributes);
            if ($revenue_period && !empty($attributes['items'])) {
                $this->deleteChildren($revenue_period);
                $this->createChildren($revenue_period, $attributes);
            }

            return [
                'status'  => true,
                'message' => 'Thêm hợp đồng KEY thành công'
            ];
        } catch (\Exception $e) {
            Log::error(__METHOD__ . ' error: ' . $e->getMessage());
            Log::error($e);

            return [
                'status'  => false,
                'message' => 'Đã có lỗi xảy ra. Vui lòng thử lại sau.'
            ];
        }
    }

    function update(int $id, array $attributes = [])
    {
        try {
            $requestDuplicateRevenue = [
                'product_type' => $attributes['product_type'] ?? null,
                'store_type'   => $attributes['store_type'] ?? null,
                'region_apply' => $attributes['region_apply'] ?? null,
                'rank_id'      => $attributes['rank_id'] ?? null,
                'period_from'  => $attributes['period_from'] ?? null,
                'period_to'    => $attributes['period_to'] ?? null,
            ];
            $oldRevenuePeriod        = $this->repository->findOrFail($id);

            if (
                $oldRevenuePeriod->product_type != $requestDuplicateRevenue['product_type']
                || $oldRevenuePeriod->store_type != $requestDuplicateRevenue['store_type']
                || $oldRevenuePeriod->region_apply != $requestDuplicateRevenue['region_apply']
                || $oldRevenuePeriod->rank_id != $requestDuplicateRevenue['rank_id']
                || $oldRevenuePeriod->period_from != $requestDuplicateRevenue['period_from']
                || $oldRevenuePeriod->period_to != $requestDuplicateRevenue['period_to']
            ) {
                $duplicateOldRevenuePeriod = $this->repository->getOldRevenue($requestDuplicateRevenue);

                if ($duplicateOldRevenuePeriod && ($attributes['status'] ?? null) == RevenuePeriod::STATUS_ACTIVE) {
                    return [
                        'status'  => false,
                        'message' => 'Thời gian áp dụng hợp đồng KEY đã bị trùng'
                    ];
                }
            }


            $revenue_period = $this->repository->update($id, $attributes);
            if ($revenue_period && !empty($attributes['items'])) {
                $this->deleteChildren($revenue_period);
                $this->createChildren($revenue_period, $attributes);
            }

            return [
                'status'  => true,
                'message' => 'Cập nhập hợp đồng KEY thành công'
            ];
        } catch (\Exception $e) {
            Log::error(__METHOD__ . ' error: ' . $e->getMessage());
            Log::error($e);

            return [
                'status'  => false,
                'message' => 'Đã có lỗi xảy ra. Vui lòng thử lại sau.'
            ];
        }
    }

    function createChildren(RevenuePeriod $revenue_period, array $attributes)
    {
        foreach ($attributes['items'] as $group_id => $sub_groups) {
            $revenue = 0;
            foreach ($sub_groups as $sub_group_id => $sub_group_value) {
                $revenue         = $revenue ?: ($sub_group_value['revenue'] ?? 0);
                $item_attributes = [
                    'revenue_period_id'      => $revenue_period->id,
                    'rank_id'                => $revenue_period->rank_id,
                    'group_id'               => $group_id,
                    'sub_group_id'           => $sub_group_id,
                    'revenue'                => $revenue,
                    'discount_rate'          => $sub_group_value['discount_rate'] ?? 0,
                    'priority_discount_rate' => $sub_group_value['priority_discount_rate'] ?? 0,
                    'priority_product_min'   => $sub_group_value['priority_product_min'] ?? 0,
                ];
                $item            = $revenue_period->items()->create($item_attributes);

                $conditions = [];
                foreach ($sub_group_value['product_conditions'] ?? [] as $_condition) {
                    foreach ($_condition['products'] ?? [] as $product_id) {
                        $qty                     = $conditions[$product_id]['min_box'] ?? 0;
                        $conditions[$product_id] = [
                            'revenue_period_item_id' => $item->id,
                            'product_id'             => $product_id,
                            'min_box'                => $qty + (int)$_condition['qty'],
                        ];
                    }
                }
                if ($item) {
                    RevenueProductCondition::query()->insert($conditions);
                }
            }
        }
    }

    function deleteChildren(RevenuePeriod $revenue_period)
    {
        $item_ids = $revenue_period->items()->pluck('id')->toArray();
        if ($item_ids) {
            $this->repository->deleteChildren($item_ids);
        }
    }

    function findProductByDate($attrs): array
    {
        return $this->productPriprityRepository->findProductByDate($attrs);
    }
}
