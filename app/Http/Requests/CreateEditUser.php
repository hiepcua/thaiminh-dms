<?php

namespace App\Http\Requests;

use App\Helpers\Helper;
use App\Models\Agency;
use App\Models\User;
use App\Repositories\Organization\OrganizationRepositoryInterface;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Support\Facades\Password;
use Illuminate\Validation\Rule;
use Spatie\Permission\Models\Role;

class CreateEditUser extends FormRequest
{
    protected $organizationRepository;

    public function __construct(
        OrganizationRepositoryInterface $organizationRepository,
        array                           $query = [], array $request = [], array $attributes = [], array $cookies = [], array $files = [], array $server = [], $content = null)
    {
        parent::__construct($query, $request, $attributes, $cookies, $files, $server, $content);
        $this->organizationRepository = $organizationRepository;
    }

    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        return Helper::userCan('them_nguoi_dung') || Helper::userCan('sua_nguoi_dung');
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules()
    {
        $user_id = $this->route('user') ?: 0;
        return [
            'name'           => ['required', 'string'],
            'email'          => ['nullable', 'string', 'email', 'max:255', 'unique:users,email' . ($user_id ? ',' . $user_id : ''), Rule::requiredIf(function () use ($user_id) {
                if ($user_id) {
                    return empty($this->request->get('username'));
                }
                return empty($this->request->get('username')) && empty($this->request->get('password'));
            })],
            'username'       => ['nullable', 'string', 'unique:users,username' . ($user_id ? ',' . $user_id : ''), Rule::requiredIf(function () {
                return empty($this->request->get('email'));
            })],
            'password'       => ['nullable', 'string', 'min:8',
                Rule::requiredIf(function () use ($user_id) {
                    return !$user_id && empty($this->request->get('email'));
                }),
                function ($attribute, $value, $fail) {
                    if ($value) {
                        $value = (string)$value;
                        if (!preg_match('/(\p{Ll}+.*\p{Lu})|(\p{Lu}+.*\p{Ll})/u', $value)) {
                            $fail('Mật khẩu phải chứa ít nhất một chữ hoa và một chữ thường.');
                        } elseif (!preg_match('/\pN/u', $value)) {
                            $fail('Mật khẩu phải chứa ít nhất một số.');
                        }
                    }
                }],
            'phone'          => ['nullable', 'string'],
            'dob'            => ['nullable', 'string'],
            'position'       => ['nullable', 'string'],
            'base_code'      => ['nullable', 'string'],
            'role_id'        => ['required'],
            'status'         => ['required', 'integer'],
            'organizations'  => [
                Rule::requiredIf(function () {
                    if ($role = $this->getRole($this->request->get('role_id'))) {

                        return in_array($role->name, ['SaleAdmin', 'ASM', 'TDV']);
                    }
                    return false;
                }),
                function ($attribute, $value, $fail) {
                    if ($value) {
                        $items = $this->organizationRepository->getByArrId($value);
                        if ($items->isEmpty()) {
                            $fail('Không tìm thấy dữ liệu :attribute.');
                        }
                    }
                }
            ],
            'product_groups' => [
                Rule::requiredIf(function () {
                    if ($role = $this->getRole($this->request->get('role_id'))) {

                        return $role->name == 'TDV';
                    }
                    return false;
                })
            ],
            'image'          => ['nullable', 'image', 'mimes:jpeg,jpg,png,gif', 'max:200'],
        ];
    }

    public function attributes()
    {
        $attrs                  = parent::attributes(); // TODO: Change the autogenerated stub
        $attrs['organizations'] = 'sơ đồ tổ chức';
        $attrs['image']         = 'hình ảnh';

        return $attrs;
    }

    function getRole($role_id)
    {
        if (!$role_id) {
            return false;
        }
        static $roles;
        if (!empty($roles[$role_id])) {
            return $roles[$role_id];
        }
        $roles[$role_id] = Role::findById($role_id);

        return $roles[$role_id];
    }

    protected function prepareForValidation()
    {
        $this->merge([
            'name'        => Helper::convertSpecialCharInput($this->name),
            'email'        => Helper::convertSpecialCharInput($this->email),
            'userName'        => Helper::convertSpecialCharInput($this->userName),
            'phone'        => Helper::convertSpecialCharInput($this->phone),
            'position'        => Helper::convertSpecialCharInput($this->position),
        ]);
    }
}
