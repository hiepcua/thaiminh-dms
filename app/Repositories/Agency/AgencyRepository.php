<?php

namespace App\Repositories\Agency;

use App\Helpers\Helper;
use App\Models\Agency;
use App\Models\Organization;
use App\Models\Province;
use App\Models\ReportAgencyInventory;
use App\Repositories\BaseRepository;

class AgencyRepository extends BaseRepository implements AgencyRepositoryInterface
{

    /**
     * @return mixed|\Illuminate\Database\Eloquent\Model
     */
    public function getModel()
    {
        return new Agency();
    }

    public function formOptions($model = null): array
    {
        $options                  = parent::formOptions($model); // TODO: Change the autogenerated stub
        $options['provinces']     = Province::query()->get();
        $options['organizations'] = isset($model)
            ? Organization::query()->where('province_id', $model->province_id)->active()->locality()->get()
            : [];
        $options['default_value'] = [
            'status' => Organization::STATUS_ACTIVE
        ];

        return $options;
    }

    public function getDivision($agencyId)
    {
        $organizations = $this->model->findOrFail($agencyId)->organizations;

        return array_unique($organizations?->pluck('parent_id')->toArray() ?? []);
    }

    public function getLocalities($agencyId)
    {
        return $this->model->findOrFail($agencyId)?->organizations;
    }

    public function makeQueryBySearchParam($with = [], $requestParams = [])
    {
        $currentUser               = Helper::currentUser();
        $organizationOfCurrentUser = Helper::getUserOrganization($currentUser);

        return $this->model
            ->with($with)
            ->when(isset($requestParams['codeOrName']), function ($query) use ($requestParams) {
                return $query->where('code', 'like', $requestParams['codeOrName'] . '%')
                    ->orWhere('name', 'like', '%' . $requestParams['codeOrName'] . '%');
            })
            ->when(isset($requestParams['division_id']), function ($query) use ($requestParams) {
                return $query->whereHas('organizations', function ($query1) use ($requestParams) {
                    return $query1->where('parent_id', $requestParams['division_id']);
                });
            })
            ->when($currentUser->can('loc_du_lieu_cay_so_do') && count($organizationOfCurrentUser),
                function ($query) use ($organizationOfCurrentUser) {
                    return $query->whereHas('organizations', function ($query1) use ($organizationOfCurrentUser) {
                        return $query1->whereIn('organizations.id', $organizationOfCurrentUser[Organization::TYPE_DIA_BAN]);
                    });
                })
            ->when(isset($requestParams['locality_ids']) && $requestParams['locality_ids'], function ($query) use ($requestParams) {
                return $query->whereHas('organizations', function ($query1) use ($requestParams) {
                    return $query1->where('id', $requestParams['locality_ids']);
                });
            })
            ->when(isset($requestParams['userIsAgency']), function ($query) use ($requestParams) {
                return $query->where('is_user', Agency::IS_USER);
            });
    }

    public function getByLocality($locality)
    {
        return $this->model->whereHas('localies', function ($q) use ($locality) {
            return is_array($locality) ? $q->whereIn('id', $locality) : $q->where('id', $locality);
        })
            ->get()
            ->map(function ($item) {
                $item->option_value = ($item->code . ' - ' . $item->name);

                return $item;
            })
            ->pluck('option_value', 'id')->toArray();
    }

    public function getDataForListScreen(
        $with = [],
        $withCount = [],
        $requestParams = [],
        $showOption = []
    ): \Illuminate\Contracts\Pagination\LengthAwarePaginator
    {
        $query = $this->makeQueryBySearchParam($with, $requestParams)
            ->withCount($withCount);

        return $this->showOption($query, $showOption);
    }

    public function organizationExists(array $organization_ids): bool
    {
        return $this->model::query()
            ->join('agency_organizations', 'agencies.id', '=', 'agency_organizations.agency_id')
            ->whereIn('agency_organizations.organization_id', $organization_ids)->exists();
    }

    public function checkCodeExists(string $code): bool
    {
        return $this->model::query()->where('code', '=', $code)->exists();
    }

    public function getByPrefixCode(string $code): \Illuminate\Database\Eloquent\Collection|array
    {
        return $this->model::query()
            ->select('code')
            ->where('code', 'like', $code . '%')
            ->get();
    }

    public function queryForInventoryHistory($dataSearch, $with)
    {
        return $this->model
            ->with($with ?? [])
            ->when(isset($dataSearch['agency_ids']), function ($q) use ($dataSearch) {
                return $q->whereIn('id', $dataSearch['agency_ids']);
            })
            ->whereHas('reportAgencyInventory', function ($q1) use ($dataSearch) {
                return $q1->when(isset($dataSearch['month']), function ($q) use ($dataSearch) {
                    return $q->where('month', $dataSearch['month']);
                })
                    ->when(isset($dataSearch['year']), function ($q) use ($dataSearch) {
                        return $q->where('year', $dataSearch['year']);
                    })
                    ->when(isset($dataSearch['status']), function ($q) use ($dataSearch) {
                        if ($dataSearch['status'] == ReportAgencyInventory::STATUS_INVENTORY_ENOUGH) {
                            return $q->where('inventory_num', '>=', 0);
                        }

                        if ($dataSearch['status'] == ReportAgencyInventory::STATUS_INVENTORY_NOT_ENOUGH) {
                            return $q->where('inventory_num', '<', 0);
                        }
                    })
                    ->when(isset($dataSearch['product_type']) && isset($dataSearch['product_ids']), function ($q) use ($dataSearch) {
                        return $q->whereIn('product_id', $dataSearch['product_ids']);
                    });
            })
            ->when(isset($dataSearch['codeOrName']), function ($q) use ($dataSearch) {
                return $q->where('name', 'like', '%' . $dataSearch['codeOrName'] . '%')
                    ->orWhere('code', 'like', '%' . $dataSearch['codeOrName'] . '%');
            })
            ->when(isset($dataSearch['division_id']), function ($q) use ($dataSearch) {
                return $q->whereHas('organizations', function ($q1) use ($dataSearch) {
                    return $q1->where('id', $dataSearch['division_id']);
                });
            });
    }

    public function getInventoryHistory($dataSearch, $with, $showOption)
    {
        $query = $this->queryForInventoryHistory($dataSearch, $with);

        return $this->showOption($query, $showOption);
    }
}
